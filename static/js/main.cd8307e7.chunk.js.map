{"version":3,"sources":["Component/Form/Form.jsx","Component/Delete/Delete.jsx","Component/MonstersCard/MonstersCard.jsx","Component/MonsterTable/MonsterTable.jsx","Component/Search/Search.jsx","Component/MonsterContainer/MonsterContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","state","name","email","handleChange","event","target","value","setState","handleClear","handleSubmit","preventDefault","newMonsters","props","handleAdd","this","onSubmit","htmlFor","type","id","onChange","onClick","Component","Delete","hadleDelete","MonstersCard","monters","className","src","alt","MonsterTable","filteredMonsters","class","map","key","Search","search","MonsterContainer","filter","obj","fetch","then","res","json","data","item","toLowerCase","startsWith","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd8307e7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Form extends Component {\r\n\r\n    state = {\r\n        name: \"\",\r\n        email: \"\"\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    handleClear = () => {\r\n        this.setState({ name: \"\", email: \"\" })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { name, email } = this.state;\r\n        const newMonsters = { name, email }\r\n        this.props.handleAdd(newMonsters);\r\n    }\r\n\r\n    render() {\r\n        const { name, email } = this.state;\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"name\">name:</label>\r\n                <input type=\"text\" name=\"name\" id=\"name\" onChange={this.handleChange} value={name} />\r\n                <label htmlFor=\"email\"></label>\r\n                <input type=\"text\" name=\"email\" id=\"email\" onChange={this.handleChange} value={email} />\r\n                <button type=\"submit\">save</button>\r\n                <button type=\"button\" onClick={this.handleClear}>clear</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form\r\n","import React, { Component } from 'react'\r\n\r\nexport class Delete extends Component {\r\n    render() {\r\n        return (\r\n            <button onClick={this.props.hadleDelete}>\r\n                pack me!\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Delete\r\n","import React, { Component } from 'react';\r\nimport \"./MonsterCard.scss\"\r\n\r\nclass MonstersCard extends Component {\r\n    render() {\r\n        const {monters} = this.props;\r\n        return (\r\n            <div className=\"Monsters-Card\">\r\n                <img  src={\"https://api.adorable.io/avatars/256/Ali@adorable2.png\" + monters.id} alt=\"fireSpot\"/>\r\n                <p>{monters.name}</p>\r\n                <h1>{monters.email}</h1>\r\n                <p>{this.props.name}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MonstersCard;","import React, { Component } from 'react'\r\nimport Delete from \"../Delete/Delete\";\r\nimport MonstersCard from \"../MonstersCard/MonstersCard\";\r\nimport \"./MonsterTable.scss\"\r\n\r\nexport class MonsterTable extends Component {\r\n    render() {\r\n        const { hadleDelete, filteredMonsters } = this.props;\r\n        return (\r\n            <div class=\"monster-grid\">\r\n                {filteredMonsters.map(monters => (\r\n                    <div key={monters.id}>\r\n                        <MonstersCard monters={monters} name={\"ali\"} />\r\n                        <Delete hadleDelete={() => hadleDelete(monters.id)} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MonsterTable\r\n","import React, { Component } from 'react'\r\n\r\nexport class Search extends Component {\r\n    render() {\r\n        const { handleChange, search } = this.props;\r\n        return (\r\n            <div className=\"search-group\">\r\n                <label htmlFor={\"search\"}>search</label>\r\n                <input name={\"search\"} id=\"search\" onChange={handleChange} value={search} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react';\r\nimport Form from \"../Form/Form\";\r\nimport \"./MonsterContainer.scss\";\r\nimport MonsterTable from '../MonsterTable/MonsterTable';\r\nimport Search from \"../Search/Search\"\r\n\r\nclass MonsterContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            monters: [],\r\n            search: \"\",\r\n        }\r\n    }\r\n\r\n    hadleDelete = (id) => {\r\n        const { monters } = this.state;\r\n        this.setState({ monters: monters.filter(monters => monters.id !== id) });\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\").then(res => res.json()).then(data => {\r\n            this.setState({ monters: data })\r\n        })\r\n    }\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n    handleAdd = (obj) => {\r\n        this.setState({ monters: [...this.state.monters, obj] });\r\n    }\r\n\r\n    render() {\r\n        const { monters, search } = this.state;\r\n        let filteredMonsters = monters.filter(item => item.name.toLowerCase().startsWith(search.toLowerCase()));\r\n        return (\r\n            <div className=\"grid-container\">\r\n                <Search handleChange={this.handleChange} search={search} />\r\n                <Form handleAdd={this.handleAdd} />\r\n                <MonsterTable filteredMonsters={filteredMonsters} hadleDelete={this.hadleDelete} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MonsterContainer;","import React from 'react';\nimport './App.css';\nimport MonsterContainer from './Component/MonsterContainer/MonsterContainer';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MonsterContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}